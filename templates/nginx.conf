#jinja2:lstrip_blocks: True
# Defines user and group credentials used by worker processes. If group is
# omitted, a group whose name equals that of user is used.
{% if ansible_os_family == 'Debian' %}
user    www-data;
{% else %}
user    nginx;
{% endif %}

# Defines the number of worker processes.    Setting it to the number of
# available CPU cores should be a good start. The value `auto` will try to
# autodetect that.
worker_processes auto;

# Configures logging to `/var/log/...`. Log level `error` is used by default.
error_log /var/log/nginx/error.log;

# Defines a file that will store the process ID of the main process. This needs
# to match the Systemd unit file.
pid /run/nginx.pid;

# Load dynamic modules. See /usr/share/nginx/README.dynamic.
{% if ansible_os_family == 'Debian' %}
include /etc/nginx/modules-enabled/*.conf;
{% else %}
include /usr/share/nginx/modules/*.conf;
{% endif %}

events {
  # Sets the maximum number of simultaneous connections that can be opened by
  # a worker process.
  worker_connections 1024;
}

http {
  # Include mime types for different file extensions.
  include /etc/nginx/mime.types;

  # Additional HHTP related Nginx options
  include /etc/nginx/conf.d/http.conf;

  server {
    # Enforce HTTPS by redirecting requests
    listen 80;
    listen [::]:80;
    server_name {{ inventory_hostname }};

    # Serve certbot ACME requests
    location /.well-known/ {
      root /var/lib/nginx/;
    }

    # Enforce encrypted connections for everything else
    location / {
      return 301 https://{{ inventory_hostname }}$request_uri;
    }
  }

  {% if opencast_nginx_cors_urls %}
  map_hash_bucket_size 128;

  map $http_origin $cors_ok {
    default       0;
    {% for url in opencast_nginx_cors_urls %}
    {{ url }}     1;
    {% endfor %}
  }

  map $cors_ok $cors_origin {
    default                              '';
    1                                    $http_origin;
  }

  map $cors_ok $cors_credentials {
    default                              '';
    1                                    true;
  }
  {% endif %}

  server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name {{ inventory_hostname }};

    ssl_certificate_key /etc/nginx/ssl/{{ inventory_hostname }}.key;
    ssl_certificate     /etc/nginx/ssl/{{ inventory_hostname }}.crt;

    # Additional TLS related Nginx options
    include /etc/nginx/conf.d/tls.conf;

    # Accept large ingests
    client_max_body_size 0;

    location /protected {
      internal;
      alias {{ opencast_nginx_storage_downloads_path }};

      # CORS configuration
      {% if opencast_nginx_cors_urls %}
      add_header Access-Control-Allow-Origin       '$cors_origin';
      add_header Access-Control-Allow-Credentials  '$cors_credentials';
      {% else %}
      add_header Access-Control-Allow-Origin       '$http_origin';
      add_header Access-Control-Allow-Credentials  'true';
      {% endif %}
      add_header Access-Control-Allow-Methods 'GET, OPTIONS' always;
      add_header Access-Control-Allow-Headers 'Origin,Content-Type,Accept,Authorization' always;

      if ($request_method = OPTIONS) {
        return 200;
      }
    }

    # Proxy configuration for Opencast
    location / {

      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Forwarded-SSL "on";

      proxy_pass http://127.0.0.1:8080;

      # Make sure to redirect location headers to HTTPS
      proxy_redirect http://$host https://$host;

      # Ensure Cookies are marked as Secure and HTTPOnly
      proxy_cookie_path / "/; HTTPOnly; Secure; SameSite=none; Partitioned";

      # Do not buffer responses
      proxy_buffering off;

      # Do not buffer requests
      proxy_request_buffering off;

      # CORS configuration
      {% if opencast_nginx_cors_urls %}
      add_header Access-Control-Allow-Origin       '$cors_origin';
      add_header Access-Control-Allow-Credentials  '$cors_credentials';
      {% else %}
      add_header Access-Control-Allow-Origin       '$http_origin';
      add_header Access-Control-Allow-Credentials  'true';
      {% endif %}
      add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS' always;
      add_header Access-Control-Allow-Headers 'Origin,Content-Type,Accept,Authorization' always;

      if ($request_method = OPTIONS) {
        return 200;
      }
    }

    # Include additional custom configuration
    include /etc/nginx/conf.d/extra.conf;
  }
}
